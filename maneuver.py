from math import pi, exp, sqrt


# R1 Начальный радиус орбиты
# R2 Радиус орбиты для фотографирования
# M Масса спутника (с топливом)
# L Длина ребра куба, которым является спутник
# V Начальная скорость спутника
# N Максимальный момент сил, который создают поворотные двигатели
# A Максимальный массовый расход топлива
# I Удельный импульс двигателя
# B Максимальный массовый расход топлива
# G Гравитационная постоянная

def J(M, L): # Вычисление момента инерции
    return M * (L ** 2) / 6


def t(dV, M, I, B): # Вычисление времени разгона
    return (1 - exp(-1 * dV / I)) * M / B


def maneuver(R1, R2, M, m, V, N, A, I, J, G, B, L):
    dV1 = sqrt(G * M / R1) * (sqrt(2 * R2 / (R1 + R2)) - 1)
    T1 = t(dV1, M, I, B) # Время разгона

    M -= t(dV1, M, I, B) * B

    t1 = ((pi) / 2 / (J(M, L) / N)) # Время раскручивания
    t2 = ((pi) / 2 / (J(M, L) / N)) # Время торможения вращения

    dV2 = sqrt(G * M / R2) * (1 - sqrt(2 * R1 / (R1 + R2)))
    T2 = t(dV2, M, I, B) # Время торможения

    M -= t(dV2, M, I, B) * B

    t3 = (pi) / 2 / (J(M, L) / N) # Аналогично t1
    t4 = (pi) / 2 / (J(M, L) / N) # Аналогично t2
    # Сыыыыыыыыыыр
    # По идее дальше надо развернуться двигателем к Земле, но времена разворота t5 и t6 будут равны t3 и t4,
    # поэтому я их не пишу. Вам надо не забыть повернуть спутник перед возвращением на высокую орбиту.
    # t1=t2; t3=t3, но формально это разные вещи, поэтому я их различаю.
    return {'T1': T1,
            't1': t1,
            't2': t2,
            'T2': T2,
            't3': t3,
            't4': t4}
